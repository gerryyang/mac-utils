---
layout: post
title: "My App in Action"
date:   2025-03-16 01:38:00 +0800
categories: 杂记
---

* Do not remove this line (it will not be displayed)
{:toc}



# 开发环境

1. MacBook Pro, Apple M1 Pro, 32GB, MacOS Sonoma
1. GoLang 1.24.1
2. DeepSeek / 豆包 / 混元
3. Cursor 1.96.2 (claude-3.7-sonnet-thinking)


# 思路: LLM-News

## 原始需求描述

我是一名游戏服务器程序员，对服务器相关技术比较了解，包括 C++ / GoLang 等编程语言，并具备一定的问题分析和解决能力。目前对 AGI 技术比较感兴趣，为了提高自己的技术想实时关注 LLM 或 AI 当前最新好用的开源工具，技术论文，技术文章，比较热门的分享文章。目前的想法是实现一个自动化信息采集系统。数据源主要包括 Github 或其他一些比较有价值的权威网站。通过自动化实时信息采集，请用 GoLang 实现一个这样的服务网站帮助我获取这些信息。另外，我想将此系统在 Github 上开源，请符合开源代码的基础规范。

1. 定期抓取 GitHub Trending 页面，通过关键词过滤（LLM、AGI、Agent等）获取实时热门仓库。
2. 获取比较权威的 Top10 论文，并生成一些摘要信息。

## 更符合 Prompt Engineering 的需求描述

**角色定位：**

资深后端开发工程师（游戏服务器方向），寻求AGI领域技术升级路径

**技术栈：**

* 核心语言：C++/GoLang
* 脚本能力：Bash/Python
* 系统能力：分布式系统/高并发处理/自动化运维

**需求场景：**

构建智能化的 AGI 技术动态追踪系统，需满足：

* 实时获取AI领域高质量开源项目动态
* 追踪顶尖学术论文进展
* 自动化处理+结构化呈现

**功能规格：**

模块一：开源项目监控

+ 数据源
  - GitHub Trending
  - Papers with Code
+ 采集策略
  - 频率：每2小时增量抓取
  - 关键词：LLM, AGI, Agent, RLHF, Multimodal, Diffusion
  - 过滤维度
    1. Stars增长率 > 50/day
    2. 最近提交 < 7天
    3. 含完整文档/案例
+ 输出格式

``` json
{
  "project_name": "",
  "description": "",
  "tech_stack": [],
  "trend_metrics": {
    "stars_24h": 0,
    "forks_24h": 0
  },
  "relevance_score": 0-1
}
```

模块二：学术论文追踪

+ 数据源
  - arXiv（cs.CL, cs.AI）
  - ACL Anthology
  - Google Scholar Top Publications

+ 处理流程
  - 每日获取各平台 Top20 论文
  - 基于 citation velocity 筛选 Top10
  - 摘要生成要求
    1. 技术新颖性（0-5分）
    2. 实现复现难度评估
    3. 核心公式/架构图示提取

+ 输出样例

``` markdown
## [论文标题]
**评分**：★★★★☆ (4.2/5)
**核心贡献**：
- 创新点1
- 创新点2
**关键技术**：
```python
# 关键代码片段
```

**系统架构约束：**

1. 响应延迟：从采集到呈现 < 15分钟
2. 存储方案：时序数据库 + 向量检索
3. 异常处理：网站反爬策略自适应
4. 安全要求：遵守 robots.txt 协议


**预期交付物：**

1. 可扩展的分布式爬虫框架
2. 智能过滤算法模块
3. 自动化摘要生成
4. 可视化仪表盘（含趋势分析）


## 使用 Cursor 编码

提交需求开始编码：

![myapp1](/assets/images/202503/myapp1.png)

最大自动化执行次数限制：

![myapp2](/assets/images/202503/myapp2.png)

自动纠错：

![myapp3](/assets/images/202503/myapp3.png)

![myapp4](/assets/images/202503/myapp4.png)

问题全部解决后，Cursor 会总结所有实现功能的摘要，以及 Next Steps 下一步计划：

![myapp5](/assets/images/202503/myapp5.png)

运行服务：

![myapp7](/assets/images/202503/myapp7.png)

打开服务页面 http://localhost:8081

![myapp6](/assets/images/202503/myapp6.png)

在当前基础上进一步功能优化：

![myapp10](/assets/images/202503/myapp10.png)

![myapp12](/assets/images/202503/myapp12.png)

![myapp11](/assets/images/202503/myapp11.png)

构建：

![myapp13](/assets/images/202503/myapp13.png)

运行：

![myapp14](/assets/images/202503/myapp14.png)

![myapp15](/assets/images/202503/myapp15.png)

停止：

![myapp16](/assets/images/202503/myapp16.png)

## 配置 Nginx 反向代理

需求描述：

在 Linux 上部署实现一个 Nginx 反向代理服务，反向代理的配置为：1. Nginx 监听 80 端口 2. 将 www.gerryyang.com 转发到 8080 端口 3. 将 llmnews.gerryyang.com 转发到 8081 端口。请完善相关的功能实现，并添加 README.md 使用说明文件。还需要提供下载安装 Nginx 可执行程序的脚本，可以将反向服务跑起来。

![myapp17](/assets/images/202503/myapp17.png)



## 优化建议

基于当前实现的功能和状态，有以下几点优化建议：

* 性能优化
  + 懒加载和分页: 当仓库数量变多时，可以实现懒加载或分页功能，避免一次性加载所有数据造成页面卡顿
  + 缓存优化: 在客户端缓存已过滤的结果，避免重复过滤相同条件的数据
  + 图片优化: 如果包含仓库图片，可以实现图片懒加载和压缩

* 用户体验改进
  + 过滤器记忆功能: 记住用户最近使用的过滤条件，下次访问时自动应用
  + 响应式设计增强: 进一步优化移动端显示，确保在小屏幕设备上也有良好的体验
  + 深色模式: 添加深色模式切换功能，减轻夜间使用时的视觉疲劳
  + 热门标签推荐: 基于当前趋势动态生成过滤标签推荐

* 功能扩展
  + 用户自定义过滤器: 允许用户创建和保存自己的自定义过滤条件组合
  + 数据导出功能: 提供导出过滤结果为CSV或JSON的选项
  + 订阅功能: 允许用户订阅特定模型或类别的更新，通过邮件通知
  + 搜索功能强化: 添加高级搜索功能，支持组合条件搜索和正则表达式

* 代码质量提升
  + 代码重构: 将主要的过滤逻辑模块化，提高可维护性
  + 单元测试: 为过滤功能添加单元测试，确保不同过滤条件下的正确性
  + 错误处理改进: 添加更健壮的错误处理和恢复机制
  + 性能监控: 添加前端性能监控，收集用户实际使用中的性能数据

* 数据质量改进
  + 增强模型关联识别: 改进对模型相关仓库的识别算法，减少误判
  + 关联数据丰富: 增加仓库与研究论文之间的关联，展示实现了特定论文的仓库
  + 社区热度指标: 添加更多社区互动指标，如Issue活跃度、贡献者数量等
  + 更新频率优化: 根据仓库活跃度动态调整抓取频率

通过以上优化，LLM News 平台将能提供更高效、更个性化的用户体验，同时更好地满足 AI 研究人员和开发者快速获取和筛选相关信息的需求。


# 思路：微信小游戏

需求调研：

请分析下现在比较火的微信小游戏或者抖音小游戏类型有哪些？

微信小游戏用户超10亿，月活5亿，抖音小游戏用户约5亿，角色卡牌和放置类游戏在Q1占主导，策略类在Q2、Q3发力。说明这些类型比较热门。

1. 休闲类如《躺平发育》表现好，还有策略类和社交互动的元素。《躺平发育》是主要投放内容，还有中重度游戏开始崛起，比如模拟经营、脑洞文字等，同时社交互动被重视。玩法与APP的重合度达40%，可能说明一些复杂玩法的小游戏受欢迎。
2. 微信小游戏的社交化和下沉市场，卡牌类游戏《幽游白书：宿命觉醒》进入畅销榜，还有SLG、轻度MMO和塔防等融合元素的新品类。微信的女性用户ARPU值增长，可能说明某些类型在女性中更受欢迎。
3. 抖音的买量指南，提到经典休闲类如三消、模拟经营消耗占比提升，传统重度类如RPG、SLG、放置卡牌占比65%，说明这些类型在买量上投入大，可能比较火。抖音大会数据提到IAP小游戏增长，RPG、SLG等消耗最高，结合直播和达人内容。

微信方面，卡牌、放置、社交休闲类比较火，比如《幽游白书》；抖音方面，休闲类如《躺平发育》是主力，但中重度如RPG、策略类在增长，还有模拟经营、脑洞文字。同时，两者都强调社交化和融合玩法。可能还要提到用户结构，比如抖音大龄男性和年轻女性用户多，影响游戏类型设计。


> 抖音小游戏热门类型

1. 休闲轻量类游戏
  + 代表作品：《躺平发育》《吸油记》《一波超人》
  + 特点：操作简单、单局时间短，适合碎片化娱乐。例如，消除类、合成类（如“二合三消”）、塔防等玩法持续占据主流，尤其在广告投放中占比显著。2024年Q1至2025年Q1，经典休闲类消耗占比提升至7%以上。
  + 用户偏好：年轻女性和大龄男性用户占比较高，游戏动机以放松和快速娱乐为主。

2. 中重度策略与RPG类游戏
  + 代表作品：《别惹农夫》《人生模拟器》
  + 特点：融合策略、放置、模拟经营等元素，注重长线运营和社交互动。例如，放置卡牌、SLG（策略类）和RPG（如仙侠/传奇题材）在2025年Q1买量消耗占比合计接近60%。
  + 趋势：开发方向转向玩法深度化，如加入局外养成、职业搭配等策略性设计，并通过社交机制提升用户留存。

3. 融合创新类游戏
  + 代表玩法：塔防+Roguelike、割草式清怪体验
  + 特点：结合多种玩法机制（如随机性、数值策略），吸引偏好新鲜感的用户。尽管融合类消耗占比有所下降，但头部产品仍通过创新保持竞争力。

4. 社交互动驱动型游戏
  + 趋势：通过直播、短视频达人合作提升曝光，例如抖音小游戏直播达人的月收入可达5万以上，用户复访率依赖侧边栏入口（占67%）。

> 微信小游戏热门类型

1. 卡牌与放置类游戏
  + 代表作品：《幽游白书：宿命觉醒》
  + 特点：传统卡牌玩法融入SLG或轻度MMO元素，强调策略性和收集乐趣。2024年Q1卡牌类占据主导地位，2025年融合放置元素的卡牌游戏（如《春秋玄奇》）进一步丰富市场。

2. 社交休闲类游戏
  + 特点：依托微信社交链，设计排名分享、合作对抗等机制。例如，消除类游戏通过好友助力或PK模式提升用户粘性，女性用户广告ARPU值同比增长70%。

3. 下沉市场驱动的品类
  + 用户群体：中年用户和女性用户占比提升，推动模拟经营、益智解谜等轻度游戏增长。例如，消除类在2024年下半年崛起为市场TOP1品类。

4. 跨端融合类游戏
  + 趋势：微信探索PC端小游戏，模拟RPG等类型在PC端的人均时长和付费渗透率显著提升，形成“多端联动”生态。


> 两大平台的共性趋势

1. 社交化与长线运营

抖音和微信均通过社交机制（如直播、短视频互动、好友排名）延长游戏生命周期。抖音侧边栏入口和微信视频号直播成为关键复访渠道。

2. 重度化与玩法融合

传统手游的玩法（如RPG、SLG）逐渐渗透小游戏领域，开发者通过简化养成线、加速经济循环适配小游戏场景。

3. 广告与内购混合变现

抖音IAP（应用内购）小游戏占比提升，微信则通过IAA（应用内广告）实现30%的变现增长。小额支付和低门槛付费策略成为主流。

> 未来潜力方向

1. AI与UGC内容结合：例如利用AI生成个性化角色，增强玩家参与感。

2. 直播与达人生态：抖音小游戏直播流水已超过达人视频收入，未来或成为核心增长点。

3. 政策红利：平台对首发游戏提供高额补贴（如抖音最高500万配资），激励开发者创新。

**总结：当前微信和抖音小游戏的热门类型均围绕用户碎片化需求展开，但抖音更偏重休闲与中重度融合，微信则依赖社交链和下沉市场。开发者需结合平台特性，平衡玩法创新与用户留存策略。**


## 躺平发育

请介绍下抖音小游戏躺平发育的游戏实现方案，请列出详细的步骤，适合使用 cursor 进行开发的提示词，便于实现一个类似的游戏。

---

以下是基于抖音小游戏《躺平发育》的游戏实现方案及开发步骤，结合其核心玩法和搜索结果中的技术要点，整理为适合使用Cursor等AI辅助工具开发的提示词和实现框架：

一、核心玩法拆解

1. 基础规则

* 双角色对抗：玩家随机分配为“猎梦者”（攻击方）或“睡梦者”（防御方），猎梦者需击破睡梦者的防御门，睡梦者需通过建造塔防和升级装备存活。
* 经济系统：睡梦者通过“睡眠”自动产出金币，金币用于升级床铺（提升金币产出效率）、建造炮塔/维修台等防御设施。
* 塔防机制：炮塔自动攻击猎梦者，维修台修复门耐久值，游戏机提供额外增益。

2. 核心循环

* 睡梦者：睡眠→金币积累→升级装备→抵御攻击→存活至倒计时结束。
* 猎梦者：移动→攻击门→升级属性（攻速/攻击力）→击溃所有睡梦者。

二、技术实现方案

步骤1：环境搭建

* 引擎选择：推荐使用轻量级框架如Phaser.js（H5）或Cocos Creator（跨平台），适配抖音小游戏容器。
* 开发工具提示词："使用Cocos Creator创建一个2D塔防游戏项目，适配移动端竖屏布局，集成抖音小游戏SDK"

步骤2：核心功能开发

1. 角色系统

* 睡梦者：实现角色移动（点击房间选择）、上床动画、金币自动生成逻辑。提示词："用TypeScript实现角色上床后每秒生成金币的逻辑，金币数量随床铺等级提升"
* 猎梦者：AI路径规划（自动寻路至最近门）、攻击动画、属性成长系统。提示词："基于A*算法实现猎梦者自动寻路，攻击门时触发耐久值减少和维修台修复逻辑"

2. 经济与建造系统

* 金币管理：通过计时器动态更新金币数量，关联UI显示。提示词："使用Cocos的schedule实现每2秒增加金币，升级床铺后提升增量参数"
* 塔防建造：点击空地弹出建造菜单，消耗金币生成炮塔/维修台。提示词："实现点击地图格子后弹出建造面板，选择炮塔类型后扣除金币并生成预制体"

3. 战斗与碰撞检测

* 炮塔攻击：基于圆形碰撞检测范围，触发子弹发射和伤害计算。提示词："用Phaser.js的物理引擎检测炮塔与猎梦者的碰撞，触发子弹动画和HP减少"
* 门耐久系统：显示耐久进度条，归零后游戏失败。提示词："使用Tween动画实现门耐久值减少时的进度条动态效果"

步骤3：联机与匹配系统 (可选，可以先实现一个单机的版本)

* 网络架构：采用帧同步或状态同步（推荐WebSocket + Redis）。提示词："使用Socket.io实现多玩家房间匹配，分配猎梦者/睡梦者角色并同步状态"
* 数据同步：同步角色位置、金币数量、建筑状态等关键数据。

步骤4：美术与音效

* 像素风格资源：使用Aseprite制作角色和建筑像素动画，导出为精灵图集。提示词："导出Aseprite动画为JSON+PNG序列帧，在Cocos中加载为SpriteAnimation"
* 音效设计：添加点击按钮、炮塔攻击、门破损等音效，适配移动端压缩格式（MP3/OGG）。

步骤5：性能优化

* 对象池管理：复用炮塔子弹、特效等高频生成对象。提示词："实现对象池管理子弹预制体，避免频繁实例化导致内存泄漏"
* 渲染优化：合并静态建筑节点的Draw Call，使用离屏Canvas处理UI元素。


三、适配抖音小游戏平台

1. SDK集成：接入抖音登录、分享、广告接口（如激励视频复活功能）。提示词："调用抖音小游戏API实现分享截图功能，用户分享后奖励金币"
2. 包体压缩：使用微信SKia图形库或TinyPNG压缩资源，控制包体在20MB以内

四、测试与发布

1. 自动化测试：使用Jest或Cocos Test Framework覆盖核心逻辑。
2. 云真机调试：通过Testin云测平台验证多机型兼容性。
3. 数据监控：接入友盟或Firebase分析用户留存和付费行为。

关键提示词示例

1. 核心逻辑。"实现睡梦者上床后每秒生成金币，升级床铺后金币产量翻倍"
2. AI 行为。"编写猎梦者AI脚本，根据剩余睡梦者数量动态调整攻击优先级"
3. 网络同步。"使用Protobuf压缩同步数据，减少WebSocket传输带宽"

通过以上方案，开发者可基于《躺平发育》的核心玩法，快速搭建类似的小游戏原型，并结合抖音平台的社交裂变特性（如直播接入、分享助力）增强用户粘性。需注意平衡数值成长曲线，避免早期版本出现经济系统崩溃或猎梦者强度失衡。










# 思路：英语聊天助手

实现一个虚拟英语聊天助手，用户可以通过文字或语音与其实现情景对话，对话能力可以借助 LLM 大模型的能力。请基于这个想法提供完整的实现方案。

---
以下是一个基于大语言模型（LLM）的虚拟英语聊天助手的完整实现方案，涵盖文字/语音交互、情景对话能力及系统架构设计：

一、系统架构设计

1. 核心模块划分

* 交互层：支持文字输入、语音输入（ASR）及语音输出（TTS）。
* 推理层：调用LLM生成对话内容，结合情景模板优化回复逻辑。
* 情景管理：预设对话场景（如餐厅点餐、旅行问路），动态调整对话策略。
* 语音处理：语音识别（Whisper/Vosk）与合成（CoVoMix/HiFi-GAN）。
* 用户管理：记录对话历史、学习进度、偏好设置。

技术栈选择

* 前端：Web/App（React/Vue）或桌面应用（Qt），集成语音输入按钮。
* 后端：GoLang 实现的服务框架，异步处理请求，对接LLM API。
* 大模型：GPT-4/Claude（云端API）或LLAMA3（本地部署）。
* 语音引擎：Whisper（ASR）、CoVoMix（多说话人TTS）10。
* 数据库：MongoDB/Redis（存储对话历史、用户画像）。

二、核心功能实现

1. 语音交互模块

* 语音识别（ASR）使用Whisper模型将用户语音转为文本，支持实时流式处理。可通过WebSocket传输音频流至后端7。
* 语音合成（TTS）采用CoVoMix模型生成自然对话语音，支持多说话人角色（如教师/学生）和情感语调10。使用HiFi-GAN优化音质，延迟控制在500ms内。






# 思路：文生视频

通过一段文案描述自动生成一段视频。


# Refer

* [提示工程指南](https://www.promptingguide.ai/zh)




